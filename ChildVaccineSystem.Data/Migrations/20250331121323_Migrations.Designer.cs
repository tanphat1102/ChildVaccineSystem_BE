// <auto-generated />
using System;
using ChildVaccineSystem.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChildVaccineSystem.Data.Migrations
{
    [DbContext(typeof(ChildVaccineSystemDBContext))]
    [Migration("20250331121323_Migrations")]
    partial class Migrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.BlogPost", b =>
                {
                    b.Property<int>("BlogPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogPostId"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlogPostId");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookingType")
                        .HasColumnType("int");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorWorkScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PricingPolicyId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingId");

                    b.HasIndex("ChildId");

                    b.HasIndex("DoctorWorkScheduleId");

                    b.HasIndex("PricingPolicyId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.BookingDetail", b =>
                {
                    b.Property<int>("BookingDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingDetailId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("BookingType")
                        .HasColumnType("int");

                    b.Property<int?>("ComboVaccineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InjectionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("VaccineId")
                        .HasColumnType("int");

                    b.Property<int?>("VaccineInventoryId")
                        .HasColumnType("int");

                    b.HasKey("BookingDetailId");

                    b.HasIndex("BookingId");

                    b.HasIndex("ComboVaccineId");

                    b.HasIndex("VaccineId");

                    b.HasIndex("VaccineInventoryId");

                    b.ToTable("BookingDetails");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Children", b =>
                {
                    b.Property<int>("ChildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChildId"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelationToUser")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ChildId");

                    b.HasIndex("UserId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.ComboDetail", b =>
                {
                    b.Property<int>("ComboDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboDetailId"));

                    b.Property<int>("ComboId")
                        .HasColumnType("int");

                    b.Property<int>("IntervalDays")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int");

                    b.Property<int?>("VaccineInventoryId")
                        .HasColumnType("int");

                    b.HasKey("ComboDetailId");

                    b.HasIndex("ComboId");

                    b.HasIndex("VaccineId");

                    b.HasIndex("VaccineInventoryId");

                    b.ToTable("ComboDetails");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.ComboVaccine", b =>
                {
                    b.Property<int>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboId"));

                    b.Property<string>("ComboName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAtUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ComboId");

                    b.ToTable("ComboVaccines");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.DoctorWorkSchedule", b =>
                {
                    b.Property<int>("DoctorWorkScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorWorkScheduleId"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DoctorWorkScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("DoctorWorkSchedules");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.InjectionSchedule", b =>
                {
                    b.Property<int>("InjectionScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InjectionScheduleId"));

                    b.Property<int>("InjectionMonth")
                        .HasColumnType("int");

                    b.Property<int>("InjectionNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VaccineScheduleDetailId")
                        .HasColumnType("int");

                    b.HasKey("InjectionScheduleId");

                    b.HasIndex("VaccineScheduleDetailId");

                    b.ToTable("InjectionSchedules");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.PricingPolicy", b =>
                {
                    b.Property<int>("PricingPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PricingPolicyId"));

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WaitTimeRangeEnd")
                        .HasColumnType("int");

                    b.Property<int>("WaitTimeRangeStart")
                        .HasColumnType("int");

                    b.HasKey("PricingPolicyId");

                    b.ToTable("PricingPolicies");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Reaction", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VaccinationRecordId")
                        .HasColumnType("int");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int");

                    b.HasKey("ReactionId");

                    b.HasIndex("VaccinationRecordId")
                        .IsUnique();

                    b.HasIndex("VaccineId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.RefundRequest", b =>
                {
                    b.Property<int>("RefundRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundRequestId"));

                    b.Property<string>("AdminNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RefundRequestId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefundRequests");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TransactionId");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccinationRecord", b =>
                {
                    b.Property<int>("VaccinationRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VaccinationRecordId"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookingDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<decimal>("DoseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("NextDoseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("VaccinationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int");

                    b.Property<int>("VaccineInventoryId")
                        .HasColumnType("int");

                    b.HasKey("VaccinationRecordId");

                    b.HasIndex("BookingDetailId");

                    b.HasIndex("ChildId");

                    b.HasIndex("UserId");

                    b.HasIndex("VaccineId");

                    b.HasIndex("VaccineInventoryId");

                    b.ToTable("VaccinationRecords");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccinationReminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReminderId");

                    b.HasIndex("BookingId");

                    b.HasIndex("ChildId");

                    b.HasIndex("UserId");

                    b.ToTable("VaccinationReminders");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccinationSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("AgeRangeEnd")
                        .HasColumnType("int");

                    b.Property<int>("AgeRangeStart")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScheduleId");

                    b.ToTable("VaccinationSchedules");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Vaccine", b =>
                {
                    b.Property<int>("VaccineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VaccineId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiseasePrevented")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DoseAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InjectionSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InjectionsCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsIncompatibility")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNecessary")
                        .HasColumnType("bit");

                    b.Property<int?>("IsParentId")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Preserve")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SideEffect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UndesirableEffects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VaccineInteractions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VaccineId");

                    b.HasIndex("IsParentId");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccineInventory", b =>
                {
                    b.Property<int>("VaccineInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VaccineInventoryId"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InitialQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ManufacturingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<int>("ReturnedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int");

                    b.HasKey("VaccineInventoryId");

                    b.HasIndex("BatchNumber")
                        .IsUnique();

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccineInventories");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccineScheduleDetail", b =>
                {
                    b.Property<int>("VaccineScheduleDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VaccineScheduleDetailId"));

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int");

                    b.HasKey("VaccineScheduleDetailId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccineScheduleDetails");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccineTransactionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VaccineInventoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VaccineInventoryId");

                    b.ToTable("VaccineTransactions");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdminWallet")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalRefunded")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.WalletTransaction", b =>
                {
                    b.Property<int>("WalletTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("WalletTransactionId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Booking", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.Children", "Children")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.DoctorWorkSchedule", "DoctorWorkSchedule")
                        .WithMany("Bookings")
                        .HasForeignKey("DoctorWorkScheduleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChildVaccineSystem.Data.Entities.PricingPolicy", "PricingPolicy")
                        .WithMany()
                        .HasForeignKey("PricingPolicyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChildVaccineSystem.Data.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Children");

                    b.Navigation("DoctorWorkSchedule");

                    b.Navigation("PricingPolicy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.BookingDetail", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.Booking", "Booking")
                        .WithMany("BookingDetails")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.ComboVaccine", "ComboVaccine")
                        .WithMany()
                        .HasForeignKey("ComboVaccineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChildVaccineSystem.Data.Entities.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChildVaccineSystem.Data.Entities.VaccineInventory", "VaccineInventory")
                        .WithMany()
                        .HasForeignKey("VaccineInventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Booking");

                    b.Navigation("ComboVaccine");

                    b.Navigation("Vaccine");

                    b.Navigation("VaccineInventory");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Children", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.User", "User")
                        .WithMany("Children")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.ComboDetail", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.ComboVaccine", "ComboVaccine")
                        .WithMany("ComboDetails")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.VaccineInventory", "VaccineInventory")
                        .WithMany()
                        .HasForeignKey("VaccineInventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ComboVaccine");

                    b.Navigation("Vaccine");

                    b.Navigation("VaccineInventory");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.DoctorWorkSchedule", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Feedback", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.Booking", "Booking")
                        .WithOne("Feedback")
                        .HasForeignKey("ChildVaccineSystem.Data.Entities.Feedback", "BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.InjectionSchedule", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.VaccineScheduleDetail", "VaccineScheduleDetail")
                        .WithMany("InjectionSchedules")
                        .HasForeignKey("VaccineScheduleDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VaccineScheduleDetail");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Notification", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Reaction", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.VaccinationRecord", "VaccinationRecord")
                        .WithOne("Reaction")
                        .HasForeignKey("ChildVaccineSystem.Data.Entities.Reaction", "VaccinationRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VaccinationRecord");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.RefundRequest", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.Booking", "Booking")
                        .WithOne("RefundRequest")
                        .HasForeignKey("ChildVaccineSystem.Data.Entities.RefundRequest", "BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.User", "User")
                        .WithMany("RefundRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Transaction", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccinationRecord", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.BookingDetail", "BookingDetail")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("BookingDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.Children", "Child")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.User", "User")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.VaccineInventory", "VaccineInventory")
                        .WithMany("VaccinationRecords")
                        .HasForeignKey("VaccineInventoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BookingDetail");

                    b.Navigation("Child");

                    b.Navigation("User");

                    b.Navigation("Vaccine");

                    b.Navigation("VaccineInventory");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccinationReminder", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.Children", "Children")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Children");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Vaccine", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.Vaccine", "ParentVaccine")
                        .WithMany("ChildVaccines")
                        .HasForeignKey("IsParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentVaccine");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccineInventory", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccineScheduleDetail", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.VaccinationSchedule", "Schedule")
                        .WithMany("VaccineScheduleDetails")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.Vaccine", "Vaccine")
                        .WithMany("VaccineScheduleDetails")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccineTransactionHistory", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.VaccineInventory", "VaccineInventory")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("VaccineInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VaccineInventory");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Wallet", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.WalletTransaction", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChildVaccineSystem.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ChildVaccineSystem.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Booking", b =>
                {
                    b.Navigation("BookingDetails");

                    b.Navigation("Feedback")
                        .IsRequired();

                    b.Navigation("RefundRequest")
                        .IsRequired();
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.BookingDetail", b =>
                {
                    b.Navigation("VaccinationRecords");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Children", b =>
                {
                    b.Navigation("VaccinationRecords");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.ComboVaccine", b =>
                {
                    b.Navigation("ComboDetails");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.DoctorWorkSchedule", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Children");

                    b.Navigation("Notifications");

                    b.Navigation("RefundRequests");

                    b.Navigation("VaccinationRecords");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccinationRecord", b =>
                {
                    b.Navigation("Reaction")
                        .IsRequired();
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccinationSchedule", b =>
                {
                    b.Navigation("VaccineScheduleDetails");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Vaccine", b =>
                {
                    b.Navigation("ChildVaccines");

                    b.Navigation("VaccineScheduleDetails");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccineInventory", b =>
                {
                    b.Navigation("TransactionHistories");

                    b.Navigation("VaccinationRecords");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.VaccineScheduleDetail", b =>
                {
                    b.Navigation("InjectionSchedules");
                });

            modelBuilder.Entity("ChildVaccineSystem.Data.Entities.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
